TOPIC
    about_StudioShell_NuGet

SHORT DESCRIPTION
    StudioShell is designed to use used from a variety of suitable hosts.
    This topic describes how to use StudioShell features from the NuGet 
	package manager console and package scripts.

LONG DESCRIPTION
    The recommended way to leverage StudioShell from NuGet is by installing 
    the StudioShell.Provider NuGet package to your solution.  This will enable
    the DTE: drive in your package manager console.
		
GETTING STARTED

    Once the StudioShell module is loaded, you can start poking around by 
	typing the following:
	
		cd dte:
				
	This will change your current directory to the dte: drive, which represents
	the root of the Visual Studio IDE.  Then type:
	
		dir
		
	to get a list of the major areas of Visual Studio you can access from 
	the console:
	

	    Container: PSDTE::\

		           Name                    
		---------- ----                    
		d  <       AddIns                  
		d+ <       CommandBars             
		d+ <       Commands                
		d  <       Debugger                
		d+ <       Errors                  
		d+ <       OutputPanes             
		d  <       Properties              
		d  <       SelectedItems           
		d  <       Solution                
		d+ <       Tasks                   
		d  <       Templates               
		d+ <       WindowConfigurations    
		d  <       Windows                 

	
	StudioShell leverages common PowerShell cmdlets whenever possible.  One 
	thing you should note is the sequence of characters in the left-most
	column.  This column indicates what common cmdlets are available at each 
	node location.  This column is used throughout the StudioShell DTE: drive
	as a way of indicating what nodes support what operations.
	
	The available cmdlets are encoded as follows:
	
		d : the node can contain child elements, and you can use the 
			set-location and get-childitems cmdlets on this node.			
		+ : the node supports the new-item cmdlet.		
		~ : the node supports the remove-item cmdlet.		
		< : the node supports the get-item cmdlet.		
		> : the node supports the set-item cmdlet.		
		0 : the node supports the clear-item cmdlet.		
		c : the node supports the copy-item cmdlet.		
		m : the node supports the move-item cmdlet.		
		r : the node supports the rename-item cmdlet.	
		i : the node supports the invoke-item cmdlet.
		
	In short, the same cmdlets you would use to work with files will also
	work with your projects, the menus, your code, etc.  For example, this
	command will create a new file:
	
		new-item -path c:\myfile.txt -type file -value "Hello World!"
		
	and this command will create a new menu item:
	
		new-item -path "dte:\commandBars\menu Bar\help\MyMenuItem" -value {}
	
	While there are not many new cmdlets to learn, some common cmdlets can
	accept parameters specific to the path with which you're trying to work.
	These parameters are documented for StudioShell paths - simply call 
	get-help for the cmdlet you wish to use, and specify the path in the cmdlet's
	path parameter:
	
		get-help new-item -path dte:\commandBars\menuBar\help
	
	For a complete list of StudioShell-specific commands, type:
	
		get-command -module StudioShell	

NOTES
    Most StudioShell features are enabled by default in the 
    StudioShell host, but are disabled by default in the NuGet host.

  PROFILE SCRIPTS
	The StudioShell host user profile script IS NOT loaded when the 
        StudioShell.Provider module is imported directly.  Instead you must
	use the NuGet profile script.
	
  SOLUTION MODULES
	Solution modules are automatically loaded and unloaded when using the
	StudioShell.Provider package.  The AutoManagePerSolutionModules setting
    in the settings.txt file has no impact on this behavior.

  MENU ITEMS
	In previous releases of StudioShell, customizing the menus of Visual 
	Studio was not supported from the package manager console; as of 
	release 1.6.1 of StudioShell.Provider, this feature is supported in 
	the package manager console.

  PROMPT
    The default Package Manager prompt makes it difficult to navigate the 
    DTE drive.  It is recommended that you modify your Package Manager prompt
    to display your current location:

    function prompt() {
        "PM $pwd> "
    }

SEE ALSO
	about_modules
	about_StudioShell    
    about_StudioShell_License
	about_StudioShell_PowerShell
	about_StudioShell_Solution_Modules
    about_StudioShell_Version
    about_StudioShell_Profiles
    about_StudioShell_Settings
    about_StudioShell_Drives
    about_StudioShell_Variables
    PSDTE
